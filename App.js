import React, { useState, useEffect, useRef } from 'react';
import ReactMarkdown from 'react-markdown';
import './App.css';

function App() {
  const [isChatOpen, setChatOpen] = useState(false);
  const [chatMessages, setChatMessages] = useState([]);
  const [showQuestions, setShowQuestions] = useState(false);
  const [inputMessage, setInputMessage] = useState("");
  const [userField, setUserField] = useState("");
  const [currentField, setCurrentField] = useState("");
  const [hasNewMessage, setHasNewMessage] = useState(false);
  const [autoMessageCount, setAutoMessageCount] = useState(0);
  const [questionCount, setQuestionCount] = useState(0); // State variable for question count
  const [messageLimitReached, setMessageLimitReached] = useState(false); // New state for message limit

  const chatRef = useRef(null);
  const inputRef = useRef(null);
  const userFieldRef = useRef(null);

  const toggleChat = () => {
    setChatOpen(!isChatOpen);
    setShowQuestions(false);
    if (isChatOpen) {
      setHasNewMessage(false);
    }
  };

  const handleSendMessage = async (message, isInternal = false) => {
    if (message.trim() === "") return;

    if (!isInternal) {
      setChatMessages((prevMessages) => [...prevMessages, { sender: "user", text: message }]);
      setQuestionCount((prevCount) => prevCount + 1); // Increment question count when user sends a message
    }

    try {
      const response = await fetch('http://localhost:5000/api/message', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ message, field: currentField }),
      });

      if (!response.ok) {
        const errorMessage = await response.text();
        throw new Error(`HTTP error! status: ${response.status}, message: ${errorMessage}`);
      }

      const data = await response.json();
      setChatMessages((prevMessages) => [...prevMessages, { sender: "ai", text: data.reply }]);
      setHasNewMessage(true);
      setAutoMessageCount(prevCount => prevCount + 1);
    } catch (error) {
      console.error('Error:', error);
      setChatMessages((prevMessages) => [
        ...prevMessages,
        { sender: "ai", text: "ƒê√£ x·∫£y ra l·ªói khi g·ª≠i y√™u c·∫ßu: " + error.message }
      ]);
      setHasNewMessage(true);
      setAutoMessageCount(prevCount => prevCount + 1);
    }
  };

  const handleKeyPressField = (e) => {
    if (e.key === 'Enter' && !messageLimitReached) { // Check if message limit is reached
      handleSubmit();
    }
  };

  const handleKeyPressMessage = (e) => {
    if (e.key === 'Enter' && !messageLimitReached) { // Check if message limit is reached
      handleSendMessage(inputMessage);
      setInputMessage("");
    }
  };

  const displayMessage = (text) => {
    setChatMessages((prevMessages) => [...prevMessages, { sender: "user", text }]);
  };

  const handleSubmit = () => {
    if (userField.trim() !== "") {
      if (!isChatOpen) {
        toggleChat();
      }
      displayMessage(userField);
      setCurrentField(userField);
      setAutoMessageCount(0);

      const questions = [
        `-N√™n ƒë·∫ßu t∆∞ hay kh√¥ng v√†o "${userField}" (ch·ªâ c·∫ßn tr·∫£ l·ªùi l√† n√™n ƒë·∫ßu t·ª´ hay kh√¥ng kh√¥ng c·∫ßn l√Ω do)`,
        `-L√Ω do n√™n ƒë·∫ßu t∆∞ v√†o "${userField} kh√¥ng" (tr·∫£ l·ªùi b·∫±ng nh·ªØng g·∫°ch ƒë·∫ßu d√≤ng d·ªÖ hi·ªÉu v√† c√≥ ghi ti√™u ƒë·ªÅ l√™n tr√™n c√¢u tr·∫£ l·ªùi).`,
        `-Th√¥ng s·ªë ch·ª©ng minh "${userField}" l√† n√™n ƒë·∫ßu t∆∞ (ƒë∆∞a ra nh·ªØng s·ªë li·ªáu c√≥ t·∫°i Vi·ªát Nam trong nh·ªØng nƒÉm g·∫ßn ƒë√¢y v√† kh√¥ng n·∫øu l·∫°i l√Ω do n√™n ƒë·∫ßu t∆∞ hay kh√¥ng v√† ng·∫Øn g·ªçn ƒë·∫ßy ƒë·ªß b·∫±ng nh·ªØng con s·ªë tr·∫£ l·ªùi trong 300 token v√† c√≥ ghi ti√™u ƒë·ªÅ 'Th√¥ng s·ªë ch·ª©ng minh' l√™n tr√™n c√¢u tr·∫£ l·ªùi).`
      ];

      questions.forEach((question, index) => {
        setTimeout(() => handleSendMessage(question, true), (index + 1) * 2000);
      });
    }
  };

  const scrollToBottom = () => {
    if (chatRef.current) {
      chatRef.current.scrollTop = chatRef.current.scrollHeight;
    }
  };

  useEffect(() => {
    scrollToBottom();
  }, [chatMessages]);

  const predefinedQuestions = [
    "L√†m th·∫ø n√†o ƒë·ªÉ s·ª≠ d·ª•ng ·ª©ng d·ª•ng?",
    "Ch·ª©c nƒÉng ch√≠nh c·ªßa ·ª©ng d·ª•ng l√† g√¨?",
    "T√¥i c√≥ th·ªÉ t√¨m tr·ª£ gi√∫p ·ªü ƒë√¢u?",
    "Th√¥ng tin b·∫£o m·∫≠t c·ªßa t√¥i ƒë∆∞·ª£c x·ª≠ l√Ω nh∆∞ th·∫ø n√†o?"
  ];

  const handleQuestionClick = (question) => {
    if (questionCount < 6) { // Check if question limit is reached
      handleSendMessage(question);
      setQuestionCount(prevCount => prevCount + 1); // Increment question count
      setShowQuestions(false);
    } else {
      alert("ƒê√£ ƒë·∫øn gi·ªõi h·∫°n c√¢u h·ªèi! B·∫°n kh√¥ng th·ªÉ h·ªèi th√™m.");
      setMessageLimitReached(true); // Set message limit reached state
    }
  };

  const toggleQuestions = () => {
    setShowQuestions((prev) => !prev);
  };

  useEffect(() => {
    if (chatMessages.length === 0 && autoMessageCount === 3) {
      setChatMessages([{ sender: "ai", text: "T√¥i l√† AI, t√¥i c√≥ th·ªÉ gi√∫p g√¨ ƒë∆∞·ª£c cho b·∫°n?" }]);
    }
  }, [chatMessages, autoMessageCount]);

  useEffect(() => {
    if (questionCount >= 6) { // Check if question count reaches 6
      setMessageLimitReached(true); // Set message limit reached state
    }
  }, [questionCount]);

  return (
    <div className="App">
      <input
        type="text"
        placeholder="Nh·∫≠p t√™n lƒ©nh v·ª±c..."
        value={userField}
        onChange={(e) => setUserField(e.target.value)}
        onKeyPress={handleKeyPressField}
        ref={userFieldRef}
        style={{ marginBottom: '20px', padding: '10px', fontSize: '16px', borderRadius: '5px', border: '1px solid #ccc' }}
        disabled={messageLimitReached} // Disable input when message limit is reached
      />

      <button
        onClick={handleSubmit}
        style={{
          marginBottom: '20px',
          padding: '10px',
          fontSize: '16px',
          borderRadius: '5px',
          border: '1px solid #ccc',
          width: '10%',
        }}
        disabled={messageLimitReached} // Disable button when message limit is reached
      >
        Submit
      </button>

      <button className="chat-button" onClick={toggleChat}>
        üí¨
        {hasNewMessage && <span className="notification-dot"></span>}
      </button>

      {isChatOpen && (
        <div className="chat-box">
          <div className="chat-header">
            <h2>Chat</h2>
            <button className="close-button" onClick={toggleChat}>X</button>
          </div>

          <div className="chat-content" style={{ overflowY: 'scroll', height: '300px' }} ref={chatRef}>
            {chatMessages.map((message, index) => (
              <div key={index} className={message.sender === "ai" ? "ai-message" : "my-message"}>
                {message.sender === "ai" ? (
                  <ReactMarkdown>{message.text}</ReactMarkdown>
                ) : (
                  <p>{message.text}</p>
                )}
              </div>
            ))}
          </div>

          {messageLimitReached && (
            <div className="message-limit-notification">
              ƒê√£ ƒë·∫øn gi·ªõi h·∫°n c√¢u h·ªèi! B·∫°n kh√¥ng th·ªÉ g·ª≠i th√™m tin nh·∫Øn.
            </div>
          )}

          <div className="question-prompt" onClick={toggleQuestions}>
            B·∫°n c√≥ mu·ªën bi·∫øt th√™m th√¥ng tin g√¨ n·ªØa kh√¥ng?
          </div>

          {showQuestions && (
            <div className="question-box">
              <ul className="question-list">
                {predefinedQuestions.map((question, index) => (
                  <li
                    key={index}
                    className="question-item"
                    onClick={() => handleQuestionClick(question)}
                  >
                    {question}
                  </li>
                ))}
              </ul>
            </div>
          )}

          <div className="chat-input-container">
            <input
              type="text"
              placeholder="Nh·∫≠p tin nh·∫Øn..."
              className="chat-input"
              value={inputMessage}
              onChange={(e) => setInputMessage(e.target.value)}
              onKeyPress={handleKeyPressMessage}
              disabled={messageLimitReached} // Disable input when message limit is reached
            />
            <button
              onClick={() => {
                handleSendMessage(inputMessage);
                setInputMessage("");
              }}
              disabled={messageLimitReached} // Disable button when message limit is reached
            >
              G·ª≠i
            </button>
          </div>
        </div>
      )}
    </div>
  );
}

export default App;
